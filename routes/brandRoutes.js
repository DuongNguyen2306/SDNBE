const express = require('express');
const { auth, adminAuth } = require('../middleware/auth');
const Brand = require('../models/Brand');
const Perfume = require('../models/Perfume'); // ThÃªm model nÆ°á»›c hoa

const router = express.Router();

// ðŸ“Œ Láº¥y danh sÃ¡ch táº¥t cáº£ thÆ°Æ¡ng hiá»‡u (Chá»‰ Admin)
router.get('/', auth, adminAuth, async (req, res) => {
    try {
        const brands = await Brand.find();
        res.json(brands);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ðŸ“Œ Láº¥y chi tiáº¿t thÆ°Æ¡ng hiá»‡u theo ID (Chá»‰ Admin)
router.get('/:brandId', auth, adminAuth, async (req, res) => {
    try {
        const brand = await Brand.findById(req.params.brandId);
        if (!brand) return res.status(404).json({ error: "Brand not found" });
        res.json(brand);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ðŸ“Œ ThÃªm thÆ°Æ¡ng hiá»‡u má»›i (Chá»‰ Admin)
router.post('/', auth, adminAuth, async (req, res) => {
    try {
        const newBrand = new Brand(req.body);
        await newBrand.save();
        res.status(201).json(newBrand);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ðŸ“Œ Cáº­p nháº­t thÆ°Æ¡ng hiá»‡u theo ID (Chá»‰ Admin)
router.put('/:brandId', auth, adminAuth, async (req, res) => {
    try {
        const updatedBrand = await Brand.findByIdAndUpdate(
            req.params.brandId,
            req.body,
            { new: true, runValidators: true }
        );
        if (!updatedBrand) return res.status(404).json({ error: "Brand not found" });
        res.json(updatedBrand);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ðŸ“Œ XÃ³a thÆ°Æ¡ng hiá»‡u theo ID (Chá»‰ Admin) + XÃ³a luÃ´n nÆ°á»›c hoa thuá»™c Brand Ä‘Ã³
router.delete('/:brandId', auth, adminAuth, async (req, res) => {
    try {
        const brand = await Brand.findById(req.params.brandId);
        if (!brand) return res.status(404).json({ error: "Brand not found" });

        // ðŸ›‘ XÃ³a táº¥t cáº£ nÆ°á»›c hoa thuá»™c brand nÃ y
        await Perfume.deleteMany({ brand: brand._id });

        // ðŸ›‘ XÃ³a brand
        await Brand.findByIdAndDelete(req.params.brandId);

        res.json({ message: "Brand and all related perfumes deleted successfully!" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

module.exports = router;
